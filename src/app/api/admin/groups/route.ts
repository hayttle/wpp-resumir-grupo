import { NextRequest, NextResponse } from 'next/server'
import { AdminGroupService } from '@/lib/services/adminGroupService'
import { supabase } from '@/lib/supabase'
import { supabaseAdmin } from '@/lib/supabase-admin'

// Verificar se o usu√°rio √© admin
async function verifyAdminAccess(request: NextRequest) {
  try {
    console.log('üîç Verificando acesso admin...')
    
    const authHeader = request.headers.get('authorization')
    console.log('üìã Auth header presente:', !!authHeader)
    
    if (!authHeader?.startsWith('Bearer ')) {
      console.log('‚ùå Token n√£o fornecido ou formato inv√°lido')
      return { isAdmin: false, error: 'Token n√£o fornecido' }
    }

    const token = authHeader.split(' ')[1]
    console.log('üîë Token extra√≠do, comprimento:', token?.length || 0)
    
    const { data: { user }, error: authError } = await supabase.auth.getUser(token)
    
    if (authError) {
      console.log('‚ùå Erro de autentica√ß√£o:', authError)
      return { isAdmin: false, error: 'Usu√°rio n√£o autenticado' }
    }
    
    if (!user) {
      console.log('‚ùå Usu√°rio n√£o encontrado')
      return { isAdmin: false, error: 'Usu√°rio n√£o autenticado' }
    }

    console.log('‚úÖ Usu√°rio autenticado:', user.id, user.email)

    // Buscar perfil do usu√°rio usando supabaseAdmin para contornar RLS
    const { data: profile, error: profileError } = await supabaseAdmin
      .from('users')
      .select('role')
      .eq('id', user.id)
      .single()

    console.log('üìä Profile query result:', { profile, profileError })

    if (profileError) {
      console.log('‚ùå Erro ao buscar perfil:', profileError)
      return { isAdmin: false, error: 'Erro ao verificar permiss√µes' }
    }

    if (!profile) {
      console.log('‚ùå Perfil n√£o encontrado')
      return { isAdmin: false, error: 'Perfil n√£o encontrado' }
    }

    console.log('üë§ Role do usu√°rio:', profile.role)

    if (profile.role !== 'admin') {
      console.log('‚ùå Usu√°rio n√£o √© admin, role:', profile.role)
      return { isAdmin: false, error: 'Acesso negado: usu√°rio n√£o √© admin' }
    }

    console.log('‚úÖ Acesso admin confirmado')
    return { isAdmin: true, userId: user.id }
  } catch (error) {
    console.log('‚ùå Erro interno na verifica√ß√£o:', error)
    return { isAdmin: false, error: 'Erro interno de verifica√ß√£o' }
  }
}

// GET - Listar todos os grupos (apenas admins)
export async function GET(request: NextRequest) {
  try {
    console.log('üöÄ GET /api/admin/groups chamado')
    
    // Verifica√ß√£o tempor√°ria simplificada
    const authHeader = request.headers.get('authorization')
    if (!authHeader?.startsWith('Bearer ')) {
      console.log('‚ùå Token n√£o fornecido')
      return NextResponse.json({ error: 'Token n√£o fornecido' }, { status: 401 })
    }

    const token = authHeader.split(' ')[1]
    const { data: { user }, error: authError } = await supabase.auth.getUser(token)
    
    if (authError || !user) {
      console.log('‚ùå Usu√°rio n√£o autenticado:', authError)
      return NextResponse.json({ error: 'Usu√°rio n√£o autenticado' }, { status: 401 })
    }

    console.log('‚úÖ Usu√°rio autenticado:', user.email)

    // Buscar perfil do usu√°rio
    const { data: profile, error: profileError } = await supabaseAdmin
      .from('users')
      .select('role')
      .eq('id', user.id)
      .single()

    console.log('üìä Profile result:', { profile, profileError })

    if (profileError) {
      console.log('‚ùå Erro ao buscar perfil:', profileError)
      return NextResponse.json({ error: 'Erro ao verificar permiss√µes' }, { status: 403 })
    }

    if (profile?.role !== 'admin') {
      console.log('‚ùå Usu√°rio n√£o √© admin:', profile?.role)
      return NextResponse.json({ error: 'Acesso negado: usu√°rio n√£o √© admin' }, { status: 403 })
    }

    console.log('‚úÖ Admin verificado, buscando grupos...')

    const groups = await AdminGroupService.getAllGroups()
    
    console.log('üìä Grupos encontrados:', groups.length)
    
    return NextResponse.json({
      success: true,
      groups,
      count: groups.length
    })
  } catch (error) {
    console.error('‚ùå Erro ao buscar grupos:', error)
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}

// PUT - Atualizar grupo (apenas admins)
export async function PUT(request: NextRequest) {
  try {
    const { isAdmin, error } = await verifyAdminAccess(request)
    
    if (!isAdmin) {
      return NextResponse.json({ error }, { status: 403 })
    }

    const body = await request.json()
    const { groupId, updates } = body

    if (!groupId) {
      return NextResponse.json(
        { error: 'ID do grupo √© obrigat√≥rio' },
        { status: 400 }
      )
    }

    const updatedGroup = await AdminGroupService.updateGroup(groupId, updates)
    
    return NextResponse.json({
      success: true,
      group: updatedGroup
    })
  } catch (error) {
    console.error('Erro ao atualizar grupo:', error)
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}

// DELETE - Deletar grupo (apenas admins)
export async function DELETE(request: NextRequest) {
  try {
    const { isAdmin, error } = await verifyAdminAccess(request)
    
    if (!isAdmin) {
      return NextResponse.json({ error }, { status: 403 })
    }

    const { searchParams } = new URL(request.url)
    const groupId = searchParams.get('id')

    if (!groupId) {
      return NextResponse.json(
        { error: 'ID do grupo √© obrigat√≥rio' },
        { status: 400 }
      )
    }

    await AdminGroupService.deleteGroup(groupId)
    
    return NextResponse.json({
      success: true,
      message: 'Grupo deletado com sucesso'
    })
  } catch (error) {
    console.error('Erro ao deletar grupo:', error)
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}
